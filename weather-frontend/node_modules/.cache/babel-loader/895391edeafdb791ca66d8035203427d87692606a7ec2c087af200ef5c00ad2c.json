{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"min-h-screen flex flex-col items-center justify-center bg-gray-100\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"text-center p-4\"\n};\nconst _hoisted_3 = {\n  class: \"bg-blue-500 p-4 rounded-lg text-white\"\n};\nconst _hoisted_4 = {\n  class: \"text-6xl font-bold\"\n};\nconst _hoisted_5 = {\n  class: \"text-xl\"\n};\nconst _hoisted_6 = [\"src\"];\nconst _hoisted_7 = {\n  class: \"text-sm\"\n};\nconst _hoisted_8 = {\n  class: \"text-sm\"\n};\nconst _hoisted_9 = {\n  class: \"text-sm\"\n};\nconst _hoisted_10 = {\n  class: \"text-sm\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" <h1 class=\\\"text-2xl mb-4\\\">Weather Results for {{ city }}</h1> \"), $setup.weather ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, _toDisplayString($setup.weather.temperature.toFixed(1)) + \"°C\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_5, _toDisplayString($setup.weather.description), 1 /* TEXT */), _createElementVNode(\"img\", {\n    src: `http://openweathermap.org/img/wn/${$setup.weather.icon}@2x.png`,\n    alt: \"Weather Icon\",\n    class: \"mx-auto\"\n  }, null, 8 /* PROPS */, _hoisted_6), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($props.city), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_8, _toDisplayString(new Date().toLocaleDateString()), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_9, \"Feels like \" + _toDisplayString($setup.weather.feels_like.toFixed(1)) + \"°C\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, \"Sunset \" + _toDisplayString(new Date($setup.weather.sunset * 1000).toLocaleTimeString()), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","weather","_hoisted_2","_createElementVNode","_hoisted_3","_hoisted_4","_toDisplayString","temperature","toFixed","_hoisted_5","description","src","icon","alt","_hoisted_6","_hoisted_7","$props","city","_hoisted_8","Date","toLocaleDateString","_hoisted_9","feels_like","_hoisted_10","sunset","toLocaleTimeString"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\views\\WeatherResults.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const getWeather = async () => {\r\n      try {\r\n        const { result } = await useQuery(\r\n          gql`\r\n            query($city: String!) {\r\n              getWeather(city: $city) {\r\n                description\r\n                temperature\r\n                feels_like\r\n                sunset\r\n                icon\r\n              }\r\n            }\r\n          `,\r\n          { city: props.city },\r\n        );\r\n        weather.value = result.value.getWeather;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getWeather();\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      city: props.city,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const getWeather = async () => {\r\n      try {\r\n        const { result } = await useQuery(\r\n          gql`\r\n            query($city: String!) {\r\n              getWeather(city: $city) {\r\n                description\r\n                temperature\r\n                feels_like\r\n                sunset\r\n                icon\r\n              }\r\n            }\r\n          `,\r\n          { city: props.city },\r\n        );\r\n        weather.value = result.value.getWeather;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getWeather();\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      \r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const getWeather = async () => {\r\n      try {\r\n        const { result } = useQuery(\r\n          gql`\r\n            query($city: String!) {\r\n              getWeather(city: $city) {\r\n                description\r\n                temperature\r\n                feels_like\r\n                sunset\r\n                icon\r\n              }\r\n            }\r\n          `,\r\n          { city: props.city }\r\n        );\r\n\r\n        // Wait for the query to resolve\r\n        const unsubscribe = result.subscribe(value => {\r\n          weather.value = value.data.getWeather;\r\n          unsubscribe(); // Unsubscribe to avoid memory leaks\r\n        });\r\n\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getWeather();\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    \r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    onMounted(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n      }\r\n\r\n      // Watch for result changes\r\n      result.watch(newResult => {\r\n        weather.value = newResult.getWeather;\r\n      });\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <!-- <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1> -->\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n\r\n"],"mappings":";;EA8QOA,KAAK,EAAC;AAAoE;;EA9QjFC,GAAA;EAgRwBD,KAAK,EAAC;;;EACnBA,KAAK,EAAC;AAAuC;;EAC3CA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAS;mBAnR5B;;EAqRaA,KAAK,EAAC;AAAS;;EACfA,KAAK,EAAC;AAAS;;EACfA,KAAK,EAAC;AAAS;;EACfA,KAAK,EAAC;AAAS;;uBAV1BE,mBAAA,CAaM,OAbNC,UAaM,GAZJC,mBAAA,qEAAsE,EAC3DC,MAAA,CAAAC,OAAO,I,cAAlBJ,mBAAA,CAUM,OAVNK,UAUM,GATJC,mBAAA,CAQM,OARNC,UAQM,GAPJD,mBAAA,CAA4E,OAA5EE,UAA4E,EAAAC,gBAAA,CAAzCN,MAAA,CAAAC,OAAO,CAACM,WAAW,CAACC,OAAO,OAAM,IAAE,iBACtEL,mBAAA,CAAoD,OAApDM,UAAoD,EAAAH,gBAAA,CAA5BN,MAAA,CAAAC,OAAO,CAACS,WAAW,kBAC3CP,mBAAA,CAA2G;IAArGQ,GAAG,sCAAsCX,MAAA,CAAAC,OAAO,CAACW,IAAI;IAAWC,GAAG,EAAC,cAAc;IAAClB,KAAK,EAAC;0BApRvGmB,UAAA,GAqRQX,mBAAA,CAAqC,OAArCY,UAAqC,EAAAT,gBAAA,CAAbU,MAAA,CAAAC,IAAI,kBAC5Bd,mBAAA,CAAgE,OAAhEe,UAAgE,EAAAZ,gBAAA,KAApCa,IAAI,GAAGC,kBAAkB,oBACrDjB,mBAAA,CAA2E,OAA3EkB,UAA2E,EAAtD,aAAW,GAAAf,gBAAA,CAAGN,MAAA,CAAAC,OAAO,CAACqB,UAAU,CAACd,OAAO,OAAM,IAAE,iBACrEL,mBAAA,CAA4F,OAA5FoB,WAA4F,EAAvE,SAAO,GAAAjB,gBAAA,KAAOa,IAAI,CAACnB,MAAA,CAAAC,OAAO,CAACuB,MAAM,SAASC,kBAAkB,mB,OAxRzF1B,mBAAA,e","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}