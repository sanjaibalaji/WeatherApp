{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nexport default {\n  name: 'HomePage',\n  setup() {\n    const city = ref('');\n    const router = useRouter();\n    const cityError = ref(false);\n    const cityErrorMessage = ref('');\n    const showModal = ref(false);\n    const validateCity = () => {\n      const cityPattern = /^[a-zA-Z\\s]+$/; // Regex for valid city names\n      if (!city.value) {\n        cityError.value = true;\n        cityErrorMessage.value = 'City name is required.';\n      } else if (!cityPattern.test(city.value)) {\n        cityError.value = true;\n        cityErrorMessage.value = 'City name can only contain letters and spaces.';\n      } else {\n        cityError.value = false;\n        cityErrorMessage.value = '';\n      }\n    };\n    const navigateToResults = () => {\n      validateCity(); // Validate the city name before navigating\n      if (!cityError.value) {\n        router.push({\n          name: 'WeatherResults',\n          params: {\n            city: city.value\n          }\n        });\n      } else {\n        showModal.value = true; // Show the modal if there's an error\n      }\n    };\n    const closeModal = () => {\n      showModal.value = false; // Close the modal\n    };\n    return {\n      city,\n      cityError,\n      cityErrorMessage,\n      showModal,\n      navigateToResults,\n      closeModal\n    };\n  }\n};","map":{"version":3,"names":["ref","useRouter","name","setup","city","router","cityError","cityErrorMessage","showModal","validateCity","cityPattern","value","test","navigateToResults","push","params","closeModal"],"sources":["C:\\Users\\Admin\\Documents\\weather\\weather-frontend\\src\\views\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather App</h1>\r\n    <form @submit.prevent=\"navigateToResults\" class=\"flex flex-col items-center mb-8\">\r\n      <input\r\n        v-model=\"city\"\r\n        type=\"text\"\r\n        placeholder=\"Enter city\"\r\n        class=\"p-2 border rounded mb-2\"\r\n        :class=\"{ 'border-red-500': cityError }\"\r\n      />\r\n      <button type=\"submit\" class=\"bg-blue-500 text-white p-2 rounded\" :disabled=\"cityError\">\r\n        Search\r\n      </button>\r\n    </form>\r\n\r\n    <!-- Popup Modal -->\r\n    <div v-if=\"showModal\" class=\"fixed inset-0 flex items-center justify-center bg-black bg-opacity-50\">\r\n      <div class=\"bg-white p-6 rounded-lg shadow-lg\">\r\n        <h2 class=\"text-lg font-bold mb-2\">Error</h2>\r\n        <p>{{ cityErrorMessage }}</p>\r\n        <button @click=\"closeModal\" class=\"mt-4 bg-blue-500 text-white px-4 py-2 rounded\">\r\n          Close\r\n        </button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  setup() {\r\n    const city = ref('');\r\n    const router = useRouter();\r\n    const cityError = ref(false);\r\n    const cityErrorMessage = ref('');\r\n    const showModal = ref(false);\r\n\r\n    const validateCity = () => {\r\n      const cityPattern = /^[a-zA-Z\\s]+$/; // Regex for valid city names\r\n      if (!city.value) {\r\n        cityError.value = true;\r\n        cityErrorMessage.value = 'City name is required.';\r\n      } else if (!cityPattern.test(city.value)) {\r\n        cityError.value = true;\r\n        cityErrorMessage.value = 'City name can only contain letters and spaces.';\r\n      } else {\r\n        cityError.value = false;\r\n        cityErrorMessage.value = '';\r\n      }\r\n    };\r\n\r\n    const navigateToResults = () => {\r\n      validateCity(); // Validate the city name before navigating\r\n      if (!cityError.value) {\r\n        router.push({ name: 'WeatherResults', params: { city: city.value } });\r\n      } else {\r\n        showModal.value = true; // Show the modal if there's an error\r\n      }\r\n    };\r\n\r\n    const closeModal = () => {\r\n      showModal.value = false; // Close the modal\r\n    };\r\n\r\n    return {\r\n      city,\r\n      cityError,\r\n      cityErrorMessage,\r\n      showModal,\r\n      navigateToResults,\r\n      closeModal,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.border-red-500 {\r\n  border-color: red;\r\n}\r\n</style>\r\n"],"mappings":";AA8BA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,SAAQ,QAAS,YAAY;AAEtC,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIJ,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMK,MAAK,GAAIJ,SAAS,CAAC,CAAC;IAC1B,MAAMK,SAAQ,GAAIN,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMO,gBAAe,GAAIP,GAAG,CAAC,EAAE,CAAC;IAChC,MAAMQ,SAAQ,GAAIR,GAAG,CAAC,KAAK,CAAC;IAE5B,MAAMS,YAAW,GAAIA,CAAA,KAAM;MACzB,MAAMC,WAAU,GAAI,eAAe,EAAE;MACrC,IAAI,CAACN,IAAI,CAACO,KAAK,EAAE;QACfL,SAAS,CAACK,KAAI,GAAI,IAAI;QACtBJ,gBAAgB,CAACI,KAAI,GAAI,wBAAwB;MACnD,OAAO,IAAI,CAACD,WAAW,CAACE,IAAI,CAACR,IAAI,CAACO,KAAK,CAAC,EAAE;QACxCL,SAAS,CAACK,KAAI,GAAI,IAAI;QACtBJ,gBAAgB,CAACI,KAAI,GAAI,gDAAgD;MAC3E,OAAO;QACLL,SAAS,CAACK,KAAI,GAAI,KAAK;QACvBJ,gBAAgB,CAACI,KAAI,GAAI,EAAE;MAC7B;IACF,CAAC;IAED,MAAME,iBAAgB,GAAIA,CAAA,KAAM;MAC9BJ,YAAY,CAAC,CAAC,EAAE;MAChB,IAAI,CAACH,SAAS,CAACK,KAAK,EAAE;QACpBN,MAAM,CAACS,IAAI,CAAC;UAAEZ,IAAI,EAAE,gBAAgB;UAAEa,MAAM,EAAE;YAAEX,IAAI,EAAEA,IAAI,CAACO;UAAM;QAAE,CAAC,CAAC;MACvE,OAAO;QACLH,SAAS,CAACG,KAAI,GAAI,IAAI,EAAE;MAC1B;IACF,CAAC;IAED,MAAMK,UAAS,GAAIA,CAAA,KAAM;MACvBR,SAAS,CAACG,KAAI,GAAI,KAAK,EAAE;IAC3B,CAAC;IAED,OAAO;MACLP,IAAI;MACJE,SAAS;MACTC,gBAAgB;MAChBC,SAAS;MACTK,iBAAiB;MACjBG;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}