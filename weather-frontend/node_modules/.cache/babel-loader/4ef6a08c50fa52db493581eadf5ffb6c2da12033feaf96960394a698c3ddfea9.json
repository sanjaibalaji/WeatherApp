{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = {\n  class: \"mt-4\"\n};\nconst _hoisted_2 = {\n  class: \"text-sm text-gray-600 flex justify-between\"\n};\nconst _hoisted_3 = {\n  class: \"text-lg font-bold flex justify-between\"\n};\nconst _hoisted_4 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_cache[0] || (_cache[0] = _createElementVNode(\"div\", null, \"Now\", -1 /* HOISTED */)), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.hourlyForecast, hour => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: hour.dt\n    }, _toDisplayString(new Date(hour.dt * 1000).getHours()) + \":00 \", 1 /* TEXT */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.hourlyForecast, hour => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: hour.dt\n    }, [_createElementVNode(\"img\", {\n      src: `http://openweathermap.org/img/wn/${hour.icon}@2x.png`,\n      alt: \"Weather Icon\",\n      class: \"w-8 h-8\"\n    }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"div\", null, _toDisplayString(hour.temp) + \"°C\", 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_Fragment","_renderList","$setup","hourlyForecast","hour","key","dt","Date","getHours","_hoisted_3","src","icon","alt","_hoisted_4","_toDisplayString","temp"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\components\\HourlyForecast.vue"],"sourcesContent":["<template>\r\n    <div class=\"mt-4\">\r\n      <div class=\"text-sm text-gray-600 flex justify-between\">\r\n        <div>Now</div>\r\n        <div v-for=\"hour in hourlyForecast\" :key=\"hour.dt\">\r\n          {{ new Date(hour.dt * 1000).getHours() }}:00\r\n        </div>\r\n      </div>\r\n      <div class=\"text-lg font-bold flex justify-between\">\r\n        <div v-for=\"hour in hourlyForecast\" :key=\"hour.dt\">\r\n          <img :src=\"`http://openweathermap.org/img/wn/${hour.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-8 h-8\" />\r\n          <div>{{ hour.temp }}°C</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import gql from 'graphql-tag';\r\n  import { useQuery } from '@vue/apollo-composable';\r\n  \r\n  export default {\r\n    name: 'HourlyForecast',\r\n    data() {\r\n      return {\r\n        hourlyForecast: [],\r\n      };\r\n    },\r\n    setup() {\r\n      const city = 'Los Angeles';\r\n      const { result } = useQuery(gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `, { city });\r\n      return {\r\n        hourlyForecast: result.hourly,\r\n      };\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";;EACSA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAA4C;;EAMlDA,KAAK,EAAC;AAAwC;mBARzD;;uBACIC,mBAAA,CAaM,OAbNC,UAaM,GAZJC,mBAAA,CAKM,OALNC,UAKM,G,0BAJJD,mBAAA,CAAc,aAAT,KAAG,uB,kBACRF,mBAAA,CAEMI,SAAA,QANdC,WAAA,CAI4BC,MAAA,CAAAC,cAAc,EAAtBC,IAAI;yBAAhBR,mBAAA,CAEM;MAF+BS,GAAG,EAAED,IAAI,CAACE;4BACtCC,IAAI,CAACH,IAAI,CAACE,EAAE,SAASE,QAAQ,MAAK,MAC3C;oCAEFV,mBAAA,CAKM,OALNW,UAKM,I,kBAJJb,mBAAA,CAGMI,SAAA,QAZdC,WAAA,CAS4BC,MAAA,CAAAC,cAAc,EAAtBC,IAAI;yBAAhBR,mBAAA,CAGM;MAH+BS,GAAG,EAAED,IAAI,CAACE;QAC7CR,mBAAA,CAAwG;MAAlGY,GAAG,sCAAsCN,IAAI,CAACO,IAAI;MAAWC,GAAG,EAAC,cAAc;MAACjB,KAAK,EAAC;4BAVtGkB,UAAA,GAWUf,mBAAA,CAA4B,aAAAgB,gBAAA,CAApBV,IAAI,CAACW,IAAI,IAAG,IAAE,gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}