{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createVNode(_component_router_view)]);\n}","map":{"version":3,"names":["_createElementBlock","_createVNode","_component_router_view"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\App.vue"],"sourcesContent":["<!-- <script>\nimport { ref } from 'vue';\nimport gql from 'graphql-tag';\nimport WeatherCard from './components/WeatherCard.vue';\nimport HourlyForecast from './components/HourlyForecast.vue';\nimport HistoricalWeatherTable from './components/HistoricalWeatherTable.vue';\n\nexport default {\n  components: {\n    WeatherCard,\n    HourlyForecast,\n    HistoricalWeatherTable,\n  },\n  setup() {\n    const city = ref('');\n    const weather = ref(null);\n    const hourlyForecast = ref([]);\n\n    const getWeather = async () => {\n      try {\n        const response = await this.$apollo.query({\n          query: gql`\n            query($city: String!) {\n              getWeather(city: $city) {\n                description\n                temperature\n                feels_like\n                sunset\n                icon\n                hourly {\n                  dt\n                  temp\n                  icon\n                }\n              }\n            }\n          `,\n          variables: { city: city.value },\n        });\n        weather.value = response.data.getWeather;\n        hourlyForecast.value = response.data.getWeather.hourly;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      city,\n      weather,\n      hourlyForecast,\n      getWeather,\n    };\n  },\n};\n</script> -->\n\n<!-- <template>\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\n    <h1 class=\"text-2xl mb-4\">Weather App</h1>\n    <form @submit.prevent=\"getWeather\" class=\"flex flex-col items-center mb-8\">\n      <input v-model=\"city\" type=\"text\" placeholder=\"Enter city\" class=\"p-2 border rounded mb-4\" />\n      <button type=\"submit\" class=\"bg-blue-500 text-white p-2 rounded\">Search</button>\n    </form>\n    <div v-if=\"weather\" class=\"text-center p-4\">\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\n        <div class=\"text-6xl font-bold\">{{ weather.temperature }}°C</div>\n        <div class=\"text-xl\">{{ weather.description }}</div>\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\n        <div class=\"text-sm\">{{ city }}</div>\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\n        <div class=\"text-sm\">Feels like {{ weather.feels_like }}°C</div>\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref } from 'vue';\nimport gql from 'graphql-tag';\n\nexport default {\n  setup() {\n    const city = ref('');\n    const weather = ref(null);\n\n    const getWeather = async () => {\n      try {\n        const response = await this.$apollo.query({\n          query: gql`\n            query($city: String!) {\n              getWeather(city: $city) {\n                description\n                temperature\n                feels_like\n                sunset\n                icon\n              }\n            }\n          `,\n          variables: { city: city.value },\n        });\n        weather.value = response.data.getWeather;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      city,\n      weather,\n      getWeather,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Add any scoped styles here */\n</style> -->\n\n<!-- <template>\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\n    <h1 class=\"text-2xl mb-4\">Weather App</h1>\n    <form @submit.prevent=\"getWeather\" class=\"flex flex-col items-center mb-8\">\n      <input v-model=\"city\" type=\"text\" placeholder=\"Enter city\" class=\"p-2 border rounded mb-4\" />\n      <button type=\"submit\" class=\"bg-blue-500 text-white p-2 rounded\">Search</button>\n    </form>\n    <div v-if=\"weather\" class=\"text-center p-4\">\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\n        <div class=\"text-6xl font-bold\">{{ weather.temperature }}°C</div>\n        <div class=\"text-xl\">{{ weather.description }}</div>\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\n        <div class=\"text-sm\">{{ city }}</div>\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\n        <div class=\"text-sm\">Feels like {{ weather.feels_like }}°C</div>\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, inject } from 'vue';\nimport gql from 'graphql-tag';\nimport { DefaultApolloClient } from '@vue/apollo-composable';\n\nexport default {\n  setup() {\n    const city = ref('');\n    const weather = ref(null);\n    const apolloClient = inject(DefaultApolloClient);\n\n    const getWeather = async () => {\n      try {\n        const response = await apolloClient.query({\n          query: gql`\n            query($city: String!) {\n              getWeather(city: $city) {\n                description\n                temperature\n                feels_like\n                sunset\n                icon\n              }\n            }\n          `,\n          variables: { city: city.value },\n        });\n        weather.value = response.data.getWeather;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      city,\n      weather,\n      getWeather,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Add any scoped styles here */\n</style> -->\n\n<!-- <template>\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\n    <h1 class=\"text-2xl mb-4\">Weather App</h1>\n    <form @submit.prevent=\"getWeather\" class=\"flex flex-col items-center mb-8\">\n      <input v-model=\"city\" type=\"text\" placeholder=\"Enter city\" class=\"p-2 border rounded mb-4\" />\n      <button type=\"submit\" class=\"bg-blue-500 text-white p-2 rounded\">Search</button>\n    </form>\n    <div v-if=\"weather\" class=\"text-center p-4\">\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\n        <div class=\"text-xl\">{{ weather.description }}</div>\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\n        <div class=\"text-sm\">{{ city }}</div>\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { ref, inject } from 'vue';\nimport gql from 'graphql-tag';\nimport { DefaultApolloClient } from '@vue/apollo-composable';\n\nexport default {\n  setup() {\n    const city = ref('');\n    const weather = ref(null);\n    const apolloClient = inject(DefaultApolloClient);\n\n    const getWeather = async () => {\n      try {\n        const response = await apolloClient.query({\n          query: gql`\n            query($city: String!) {\n              getWeather(city: $city) {\n                description\n                temperature\n                feels_like\n                sunset\n                icon\n              }\n            }\n          `,\n          variables: { city: city.value },\n        });\n        weather.value = response.data.getWeather;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n\n    return {\n      city,\n      weather,\n      getWeather,\n    };\n  },\n};\n</script>\n\n<style scoped>\n/* Add any scoped styles here */\n</style> -->\n\n<template>\n  <div>\n    <router-view></router-view>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'App',\n};\n</script>\n\n<style scoped>\n/* Add any scoped styles here */\n</style>\n"],"mappings":";;;uBAgQEA,mBAAA,CAEM,cADJC,YAAA,CAA2BC,sBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}