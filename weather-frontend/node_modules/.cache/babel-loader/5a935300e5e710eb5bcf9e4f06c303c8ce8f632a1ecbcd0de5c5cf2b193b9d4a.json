{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"min-h-screen w-full flex items-center justify-center bg-cover bg-center bg-fixed\",\n  style: {\n    \"background-image\": \"url('your-background-image.jpg')\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"p-8 rounded-lg shadow-lg w-full max-w-7xl bg-cover bg-center bg-fixed\"\n};\nconst _hoisted_3 = {\n  class: \"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\"\n};\nconst _hoisted_4 = {\n  class: \"weather-card flex flex-col items-center md:items-start text-center md:text-left w-full md:w-1/3 h-80 p-6\"\n};\nconst _hoisted_5 = {\n  key: 0,\n  class: \"text-center md:text-left p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full\"\n};\nconst _hoisted_6 = {\n  class: \"text-6xl font-bold text-white\"\n};\nconst _hoisted_7 = {\n  class: \"text-xl text-white\"\n};\nconst _hoisted_8 = [\"src\"];\nconst _hoisted_9 = {\n  class: \"text-sm text-white\"\n};\nconst _hoisted_10 = {\n  class: \"text-sm text-white\"\n};\nconst _hoisted_11 = {\n  class: \"text-sm text-white\"\n};\nconst _hoisted_12 = {\n  class: \"text-sm text-white\"\n};\nconst _hoisted_13 = {\n  class: \"hourly-forecast-card w-full md:w-1/2 h-1/2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HourlyForecast = _resolveComponent(\"HourlyForecast\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [$setup.weather ? (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString($setup.weather.temperature.toFixed(1)) + \"°C\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.weather.description), 1 /* TEXT */), _createElementVNode(\"img\", {\n    src: `http://openweathermap.org/img/wn/${$setup.weather.icon}@2x.png`,\n    alt: \"Weather Icon\",\n    class: \"w-12 h-12 mx-auto md:mx-0\"\n  }, null, 8 /* PROPS */, _hoisted_8), _createElementVNode(\"div\", _hoisted_9, _toDisplayString($props.city), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_10, _toDisplayString(new Date().toLocaleDateString()), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_11, \"Feels like \" + _toDisplayString($setup.weather.feels_like.toFixed(1)) + \"°C\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_12, \"Sunset \" + _toDisplayString(new Date($setup.weather.sunset * 1000).toLocaleTimeString()), 1 /* TEXT */)])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_13, [_createVNode(_component_HourlyForecast, {\n    hourlyForecast: $setup.hourlyForecast\n  }, null, 8 /* PROPS */, [\"hourlyForecast\"])])]), _cache[0] || (_cache[0] = _createElementVNode(\"div\", {\n    class: \"random-text text-white mt-4\"\n  }, [_createCommentVNode(\" Your random text lines here \"), _createTextVNode(\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. \")], -1 /* HOISTED */))])]);\n}","map":{"version":3,"names":["class","style","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","$setup","weather","_hoisted_5","_hoisted_6","_toDisplayString","temperature","toFixed","_hoisted_7","description","src","icon","alt","_hoisted_8","_hoisted_9","$props","city","_hoisted_10","Date","toLocaleDateString","_hoisted_11","feels_like","_hoisted_12","sunset","toLocaleTimeString","_createCommentVNode","_hoisted_13","_createVNode","_component_HourlyForecast","hourlyForecast","_createTextVNode"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\views\\WeatherResults.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n -->\r\n\r\n <!-- <template>\r\n    <div class=\"min-h-screen w-full flex flex-col items-center justify-center bg-weather bg-cover bg-center bg-fixed h-screen\">\r\n      <div class=\"flex flex-col items-center justify-center\">\r\n      <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4 rounded-lg bg-white bg-opacity-25 backdrop-blur-sm\">\r\n      <div class=\" p-4  rounded-lg text-black\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n      </div>\r\n    <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- above code final code -->\r\n\r\n<template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-cover bg-center bg-fixed\" style=\"background-image: url('your-background-image.jpg');\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-7xl bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\">\r\n        <div class=\"weather-card flex flex-col items-center md:items-start text-center md:text-left w-full md:w-1/3 h-80 p-6\">\r\n          <div v-if=\"weather\" class=\"text-center md:text-left p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full\">\r\n            <div class=\"text-6xl font-bold text-white\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n            <div class=\"text-xl text-white\">{{ weather.description }}</div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto md:mx-0\" />\r\n            <div class=\"text-sm text-white\">{{ city }}</div>\r\n            <div class=\"text-sm text-white\">{{ new Date().toLocaleDateString() }}</div>\r\n            <div class=\"text-sm text-white\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n            <div class=\"text-sm text-white\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"hourly-forecast-card w-full md:w-1/2 h-1/2\">\r\n          <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"random-text text-white mt-4\">\r\n        <!-- Your random text lines here -->\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.weather-card {\r\n  @apply h-80 w-full md:w-1/3 bg-white bg-opacity-30 backdrop-blur-sm p-6 m-4 rounded-lg;\r\n}\r\n\r\n.hourly-forecast-card {\r\n  @apply w-full md:w-1/2 h-1/2 bg-white bg-opacity-30 backdrop-blur-sm p-6 m-4 rounded-lg;\r\n}\r\n\r\n.random-text {\r\n  @apply text-white mt-4 p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg;\r\n}\r\n\r\n@media (min-width: 768px) {\r\n  .weather-card {\r\n    @apply h-80 w-1/3;\r\n  }\r\n  .hourly-forecast-card {\r\n    @apply h-40 w-1/2;\r\n  }\r\n}\r\n</style>\r\n"],"mappings":";;EA+IOA,KAAK,EAAC,kFAAkF;EAACC,KAA2D,EAA3D;IAAA;EAAA;;;EACvFD,KAAK,EAAC;AAAuE;;EAC3EA,KAAK,EAAC;AAAsG;;EAC1GA,KAAK,EAAC;AAA0G;;EAlJ7HE,GAAA;EAmJ8BF,KAAK,EAAC;;;EACnBA,KAAK,EAAC;AAA+B;;EACrCA,KAAK,EAAC;AAAoB;mBArJ3C;;EAuJiBA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAoB;;EAG9BA,KAAK,EAAC;AAA4C;;;uBAd7DG,mBAAA,CAuBM,OAvBNC,UAuBM,GAtBJC,mBAAA,CAqBM,OArBNC,UAqBM,GApBJD,mBAAA,CAeM,OAfNE,UAeM,GAdJF,mBAAA,CAUM,OAVNG,UAUM,GATOC,MAAA,CAAAC,OAAO,I,cAAlBP,mBAAA,CAQM,OARNQ,UAQM,GAPJN,mBAAA,CAAuF,OAAvFO,UAAuF,EAAAC,gBAAA,CAAzCJ,MAAA,CAAAC,OAAO,CAACI,WAAW,CAACC,OAAO,OAAM,IAAE,iBACjFV,mBAAA,CAA+D,OAA/DW,UAA+D,EAAAH,gBAAA,CAA5BJ,MAAA,CAAAC,OAAO,CAACO,WAAW,kBACtDZ,mBAAA,CAA6H;IAAvHa,GAAG,sCAAsCT,MAAA,CAAAC,OAAO,CAACS,IAAI;IAAWC,GAAG,EAAC,cAAc;IAACpB,KAAK,EAAC;0BAtJ3GqB,UAAA,GAuJYhB,mBAAA,CAAgD,OAAhDiB,UAAgD,EAAAT,gBAAA,CAAbU,MAAA,CAAAC,IAAI,kBACvCnB,mBAAA,CAA2E,OAA3EoB,WAA2E,EAAAZ,gBAAA,KAApCa,IAAI,GAAGC,kBAAkB,oBAChEtB,mBAAA,CAAsF,OAAtFuB,WAAsF,EAAtD,aAAW,GAAAf,gBAAA,CAAGJ,MAAA,CAAAC,OAAO,CAACmB,UAAU,CAACd,OAAO,OAAM,IAAE,iBAChFV,mBAAA,CAAuG,OAAvGyB,WAAuG,EAAvE,SAAO,GAAAjB,gBAAA,KAAOa,IAAI,CAACjB,MAAA,CAAAC,OAAO,CAACqB,MAAM,SAASC,kBAAkB,mB,KA1JxGC,mBAAA,e,GA6JQ5B,mBAAA,CAEM,OAFN6B,WAEM,GADJC,YAAA,CAAmDC,yBAAA;IAAlCC,cAAc,EAAE5B,MAAA,CAAA4B;EAAc,4C,+BAGnDhC,mBAAA,CAGM;IAHDL,KAAK,EAAC;EAA6B,IACtCiC,mBAAA,iCAAoC,EAlK5CK,gBAAA,CAkK4C,4DAEtC,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}