{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"min-h-screen w-full flex items-center justify-center bg-cover bg-center bg-fixed bg-weather-bg\"\n};\nconst _hoisted_2 = {\n  class: \"flex flex-col items-center justify-center\"\n};\nconst _hoisted_3 = {\n  class: \"text-2xl mb-4 text-white\"\n};\nconst _hoisted_4 = [\"src\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HourlyForecast = _resolveComponent(\"HourlyForecast\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"h1\", _hoisted_3, \"Weather Results for \" + _toDisplayString($setup.city), 1 /* TEXT */), $setup.weather ? (_openBlock(), _createElementBlock(\"div\", {\n    key: 0,\n    class: _normalizeClass([$setup.cardClass, \"text-center p-4 rounded-lg\"])\n  }, [_createElementVNode(\"div\", {\n    class: _normalizeClass([$setup.textClass, \"text-6xl font-bold\"])\n  }, _toDisplayString($setup.weather.temperature.toFixed(1)) + \"°C\", 3 /* TEXT, CLASS */), _createElementVNode(\"div\", {\n    class: _normalizeClass([$setup.textClass, \"text-xl\"])\n  }, _toDisplayString($setup.weather.description), 3 /* TEXT, CLASS */), _createElementVNode(\"img\", {\n    src: `http://openweathermap.org/img/wn/${$setup.weather.icon}@2x.png`,\n    alt: \"Weather Icon\",\n    class: \"w-12 h-12 mx-auto\"\n  }, null, 8 /* PROPS */, _hoisted_4), _createElementVNode(\"div\", {\n    class: _normalizeClass([$setup.textClass, \"text-sm\"])\n  }, _toDisplayString($setup.city), 3 /* TEXT, CLASS */), _createElementVNode(\"div\", {\n    class: _normalizeClass([$setup.textClass, \"text-sm\"])\n  }, _toDisplayString(new Date().toLocaleDateString()), 3 /* TEXT, CLASS */), _createElementVNode(\"div\", {\n    class: _normalizeClass([$setup.textClass, \"text-sm\"])\n  }, \"Feels like \" + _toDisplayString($setup.weather.feels_like.toFixed(1)) + \"°C\", 3 /* TEXT, CLASS */), _createElementVNode(\"div\", {\n    class: _normalizeClass([$setup.textClass, \"text-sm\"])\n  }, \"Sunset \" + _toDisplayString(new Date($setup.weather.sunset * 1000).toLocaleTimeString()), 3 /* TEXT, CLASS */)], 2 /* CLASS */)) : _createCommentVNode(\"v-if\", true), _createVNode(_component_HourlyForecast, {\n    hourlyForecast: $setup.hourlyForecast\n  }, null, 8 /* PROPS */, [\"hourlyForecast\"])])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_toDisplayString","$setup","city","weather","key","_normalizeClass","cardClass","textClass","temperature","toFixed","description","src","icon","alt","_hoisted_4","Date","toLocaleDateString","feels_like","sunset","toLocaleTimeString","_createCommentVNode","_createVNode","_component_HourlyForecast","hourlyForecast"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\views\\WeatherResults.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n -->\r\n\r\n <!-- <template>\r\n    <div class=\"min-h-screen w-full flex flex-col items-center justify-center bg-weather bg-cover bg-center bg-fixed h-screen\">\r\n      <div class=\"flex flex-col items-center justify-center\">\r\n      <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4   backdrop-blur-sm\">\r\n      <div class=\" p-4  rounded-lg text-black\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n      </div>\r\n    <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- correctly working code above and final code above -->\r\n\r\n<template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-cover bg-center bg-fixed bg-weather-bg\">\r\n    <div class=\"flex flex-col items-center justify-center\">\r\n      <h1 class=\"text-2xl mb-4 text-white\">Weather Results for {{ city }}</h1>\r\n      <div v-if=\"weather\" :class=\"cardClass\" class=\"text-center p-4 rounded-lg\">\r\n        <div :class=\"textClass\" class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div :class=\"textClass\" class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto\" />\r\n        <div :class=\"textClass\" class=\"text-sm\">{{ city }}</div>\r\n        <div :class=\"textClass\" class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div :class=\"textClass\" class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div :class=\"textClass\" class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n      <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect, computed } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    const cardClass = computed(() => {\r\n      if (!weather.value) return '';\r\n      const temp = weather.value.temperature;\r\n\r\n      if (temp < 0) return 'bg-blue-700 text-white bg-opacity-70 backdrop-blur-sm';\r\n      if (temp < 10) return 'bg-blue-500 text-white bg-opacity-70 backdrop-blur-sm';\r\n      if (temp < 20) return 'bg-green-500 text-white bg-opacity-70 backdrop-blur-sm';\r\n      if (temp < 30) return 'bg-yellow-500 text-black bg-opacity-70 backdrop-blur-sm';\r\n      return 'bg-red-500 text-white bg-opacity-70 backdrop-blur-sm';\r\n    });\r\n\r\n    const textClass = computed(() => {\r\n      if (!weather.value) return 'text-gray-900';\r\n      const temp = weather.value.temperature;\r\n\r\n      if (temp < 30) return 'text-white';\r\n      return 'text-black';\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      city: props.city,\r\n      loading,\r\n      error,\r\n      cardClass,\r\n      textClass,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n"],"mappings":";;EA+IOA,KAAK,EAAC;AAAgG;;EACpGA,KAAK,EAAC;AAA2C;;EAChDA,KAAK,EAAC;AAA0B;mBAjJ1C;;;uBA+IEC,mBAAA,CAcM,OAdNC,UAcM,GAbJC,mBAAA,CAYM,OAZNC,UAYM,GAXJD,mBAAA,CAAwE,MAAxEE,UAAwE,EAAnC,sBAAoB,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,IAAI,kBACrDD,MAAA,CAAAE,OAAO,I,cAAlBR,mBAAA,CAQM;IA1JZS,GAAA;IAkJ2BV,KAAK,EAlJhCW,eAAA,EAkJkCJ,MAAA,CAAAK,SAAS,EAAQ,4BAA4B;MACvET,mBAAA,CAA+F;IAAzFH,KAAK,EAnJnBW,eAAA,EAmJqBJ,MAAA,CAAAM,SAAS,EAAQ,oBAAoB;sBAAIN,MAAA,CAAAE,OAAO,CAACK,WAAW,CAACC,OAAO,OAAM,IAAE,wBACzFZ,mBAAA,CAAuE;IAAjEH,KAAK,EApJnBW,eAAA,EAoJqBJ,MAAA,CAAAM,SAAS,EAAQ,SAAS;sBAAIN,MAAA,CAAAE,OAAO,CAACO,WAAW,yBAC9Db,mBAAA,CAAqH;IAA/Gc,GAAG,sCAAsCV,MAAA,CAAAE,OAAO,CAACS,IAAI;IAAWC,GAAG,EAAC,cAAc;IAACnB,KAAK,EAAC;0BArJvGoB,UAAA,GAsJQjB,mBAAA,CAAwD;IAAlDH,KAAK,EAtJnBW,eAAA,EAsJqBJ,MAAA,CAAAM,SAAS,EAAQ,SAAS;sBAAIN,MAAA,CAAAC,IAAI,yBAC/CL,mBAAA,CAAmF;IAA7EH,KAAK,EAvJnBW,eAAA,EAuJqBJ,MAAA,CAAAM,SAAS,EAAQ,SAAS;0BAAQQ,IAAI,GAAGC,kBAAkB,2BACxEnB,mBAAA,CAA8F;IAAxFH,KAAK,EAxJnBW,eAAA,EAwJqBJ,MAAA,CAAAM,SAAS,EAAQ,SAAS;KAAC,aAAW,GAAAP,gBAAA,CAAGC,MAAA,CAAAE,OAAO,CAACc,UAAU,CAACR,OAAO,OAAM,IAAE,wBACxFZ,mBAAA,CAA+G;IAAzGH,KAAK,EAzJnBW,eAAA,EAyJqBJ,MAAA,CAAAM,SAAS,EAAQ,SAAS;KAAC,SAAO,GAAAP,gBAAA,KAAOe,IAAI,CAACd,MAAA,CAAAE,OAAO,CAACe,MAAM,SAASC,kBAAkB,0B,oBAzJ5GC,mBAAA,gBA2JMC,YAAA,CAAmDC,yBAAA;IAAlCC,cAAc,EAAEtB,MAAA,CAAAsB;EAAc,4C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}