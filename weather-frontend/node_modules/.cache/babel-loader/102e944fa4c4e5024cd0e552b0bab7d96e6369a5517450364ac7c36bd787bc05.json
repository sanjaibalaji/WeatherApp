{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref } from 'vue';\nimport { useRouter } from 'vue-router';\nimport { useQuery } from '@vue/apollo-composable';\nimport gql from 'graphql-tag';\nconst VALIDATE_CITY = gql`\n  query ValidateCity($city: String!) {\n    validateCity(city: $city) {\n      valid\n      message\n    }\n  }\n`;\nexport default {\n  name: 'HomePage',\n  setup() {\n    const city = ref('');\n    const router = useRouter();\n    const showPopup = ref(false);\n    const popupMessage = ref('');\n    const navigateToResults = async () => {\n      try {\n        // Call the GraphQL query to validate the city\n        const {\n          data\n        } = await apolloClient.query({\n          query: VALIDATE_CITY,\n          variables: {\n            city: city.value\n          }\n        });\n        if (data.validateCity.valid) {\n          // If the city is valid, navigate to the results page\n          router.push({\n            name: 'WeatherResults',\n            params: {\n              city: city.value\n            }\n          });\n        } else {\n          // Show popup with the validation message\n          popupMessage.value = data.validateCity.message;\n          showPopup.value = true;\n        }\n      } catch (error) {\n        // Handle any unexpected errors\n        console.error(error); // Log the error for debugging\n        popupMessage.value = 'An unexpected error occurred.';\n        showPopup.value = true;\n      }\n    };\n    return {\n      city,\n      navigateToResults,\n      showPopup,\n      popupMessage\n    };\n  }\n};","map":{"version":3,"names":["ref","useRouter","useQuery","gql","VALIDATE_CITY","name","setup","city","router","showPopup","popupMessage","navigateToResults","data","apolloClient","query","variables","value","validateCity","valid","push","params","message","error","console"],"sources":["C:\\Users\\Admin\\Documents\\weather\\weather-frontend\\src\\views\\HomePage.vue"],"sourcesContent":["<template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather App</h1>\r\n    <form @submit.prevent=\"navigateToResults\" class=\"flex flex-col items-center mb-8\">\r\n      <input v-model=\"city\" type=\"text\" placeholder=\"Enter city\" class=\"p-2 border rounded mb-4\" />\r\n      <button type=\"submit\" class=\"bg-blue-500 text-white p-2 rounded\">Search</button>\r\n    </form>\r\n    <div v-if=\"showPopup\" class=\"fixed inset-0 flex items-center justify-center bg-gray-500 bg-opacity-50\">\r\n      <div class=\"bg-white p-4 rounded shadow-md\">\r\n        <p>{{ popupMessage }}</p>\r\n        <button @click=\"showPopup = false\" class=\"bg-blue-500 text-white p-2 rounded\">Close</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref } from 'vue';\r\nimport { useRouter } from 'vue-router';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport gql from 'graphql-tag';\r\n\r\nconst VALIDATE_CITY = gql`\r\n  query ValidateCity($city: String!) {\r\n    validateCity(city: $city) {\r\n      valid\r\n      message\r\n    }\r\n  }\r\n`;\r\n\r\nexport default {\r\n  name: 'HomePage',\r\n  setup() {\r\n    const city = ref('');\r\n    const router = useRouter();\r\n    const showPopup = ref(false);\r\n    const popupMessage = ref('');\r\n\r\n    const navigateToResults = async () => {\r\n      try {\r\n        // Call the GraphQL query to validate the city\r\n        const { data } = await apolloClient.query({\r\n          query: VALIDATE_CITY,\r\n          variables: { city: city.value },\r\n        });\r\n        \r\n        if (data.validateCity.valid) {\r\n          // If the city is valid, navigate to the results page\r\n          router.push({ name: 'WeatherResults', params: { city: city.value } });\r\n        } else {\r\n          // Show popup with the validation message\r\n          popupMessage.value = data.validateCity.message;\r\n          showPopup.value = true;\r\n        }\r\n      } catch (error) {\r\n        // Handle any unexpected errors\r\n        console.error(error); // Log the error for debugging\r\n        popupMessage.value = 'An unexpected error occurred.';\r\n        showPopup.value = true;\r\n      }\r\n    };\r\n\r\n    return {\r\n      city,\r\n      navigateToResults,\r\n      showPopup,\r\n      popupMessage,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\n/* Add any additional styles here */\r\n</style>\r\n"],"mappings":";AAiBA,SAASA,GAAE,QAAS,KAAK;AACzB,SAASC,SAAQ,QAAS,YAAY;AACtC,SAASC,QAAO,QAAS,wBAAwB;AACjD,OAAOC,GAAE,MAAO,aAAa;AAE7B,MAAMC,aAAY,GAAID,GAAG;;;;;;;AAOzB,CAAC;AAED,eAAe;EACbE,IAAI,EAAE,UAAU;EAChBC,KAAKA,CAAA,EAAG;IACN,MAAMC,IAAG,GAAIP,GAAG,CAAC,EAAE,CAAC;IACpB,MAAMQ,MAAK,GAAIP,SAAS,CAAC,CAAC;IAC1B,MAAMQ,SAAQ,GAAIT,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMU,YAAW,GAAIV,GAAG,CAAC,EAAE,CAAC;IAE5B,MAAMW,iBAAgB,GAAI,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF;QACA,MAAM;UAAEC;QAAK,IAAI,MAAMC,YAAY,CAACC,KAAK,CAAC;UACxCA,KAAK,EAAEV,aAAa;UACpBW,SAAS,EAAE;YAAER,IAAI,EAAEA,IAAI,CAACS;UAAM;QAChC,CAAC,CAAC;QAEF,IAAIJ,IAAI,CAACK,YAAY,CAACC,KAAK,EAAE;UAC3B;UACAV,MAAM,CAACW,IAAI,CAAC;YAAEd,IAAI,EAAE,gBAAgB;YAAEe,MAAM,EAAE;cAAEb,IAAI,EAAEA,IAAI,CAACS;YAAM;UAAE,CAAC,CAAC;QACvE,OAAO;UACL;UACAN,YAAY,CAACM,KAAI,GAAIJ,IAAI,CAACK,YAAY,CAACI,OAAO;UAC9CZ,SAAS,CAACO,KAAI,GAAI,IAAI;QACxB;MACF,EAAE,OAAOM,KAAK,EAAE;QACd;QACAC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,EAAE;QACtBZ,YAAY,CAACM,KAAI,GAAI,+BAA+B;QACpDP,SAAS,CAACO,KAAI,GAAI,IAAI;MACxB;IACF,CAAC;IAED,OAAO;MACLT,IAAI;MACJI,iBAAiB;MACjBF,SAAS;MACTC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}