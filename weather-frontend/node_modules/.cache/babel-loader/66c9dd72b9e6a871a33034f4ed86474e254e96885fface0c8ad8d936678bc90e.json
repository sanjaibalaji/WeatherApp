{"ast":null,"code":"import gql from 'graphql-tag';\nimport { useQuery } from '@vue/apollo-composable';\nexport default {\n  name: 'HistoricalWeatherTable',\n  data() {\n    return {\n      location: 'Delhi',\n      fromDate: '',\n      toDate: '',\n      historicalWeather: []\n    };\n  },\n  methods: {\n    async getHistoricalWeather() {\n      if (!this.fromDate || !this.toDate || new Date(this.toDate) - new Date(this.fromDate) > 30 * 24 * 60 * 60 * 1000) {\n        alert('Please select a valid date range within 30 days.');\n        return;\n      }\n      const response = await this.$apollo.query({\n        query: gql`\n            query($city: String!, $from: String!, $to: String!) {\n              getHistoricalWeather(city: $city, from: $from, to: $to) {\n                date\n                temperature\n                description\n                feels_like\n                sunset\n              }\n            }\n          `,\n        variables: {\n          city: this.location,\n          from: this.fromDate,\n          to: this.toDate\n        }\n      });\n      this.historicalWeather = response.data.getHistoricalWeather;\n    }\n  }\n};","map":{"version":3,"names":["gql","useQuery","name","data","location","fromDate","toDate","historicalWeather","methods","getHistoricalWeather","Date","alert","response","$apollo","query","variables","city","from","to"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\components\\HistoricalWeatherTable.vue"],"sourcesContent":["<template>\r\n    <div class=\"mt-8\">\r\n      <div class=\"flex flex-col items-center\">\r\n        <label for=\"location\">Select Location:</label>\r\n        <select v-model=\"location\" id=\"location\" class=\"mb-4 p-2 border rounded\">\r\n          <option value=\"Delhi\">Delhi</option>\r\n          <option value=\"Moscow\">Moscow</option>\r\n          <option value=\"Paris\">Paris</option>\r\n          <option value=\"New York\">New York</option>\r\n          <option value=\"Sydney\">Sydney</option>\r\n          <option value=\"Riyadh\">Riyadh</option>\r\n        </select>\r\n  \r\n        <label for=\"from-date\">From:</label>\r\n        <input type=\"date\" v-model=\"fromDate\" id=\"from-date\" class=\"mb-4 p-2 border rounded\" />\r\n  \r\n        <label for=\"to-date\">To:</label>\r\n        <input type=\"date\" v-model=\"toDate\" id=\"to-date\" class=\"mb-4 p-2 border rounded\" />\r\n  \r\n        <button @click=\"getHistoricalWeather\" class=\"bg-blue-500 text-white p-2 rounded\">Get Historical Weather</button>\r\n      </div>\r\n      \r\n      <table class=\"min-w-full mt-6\">\r\n        <thead>\r\n          <tr>\r\n            <th class=\"border px-4 py-2\">Date</th>\r\n            <th class=\"border px-4 py-2\">Temperature</th>\r\n            <th class=\"border px-4 py-2\">Description</th>\r\n            <th class=\"border px-4 py-2\">Feels Like</th>\r\n            <th class=\"border px-4 py-2\">Sunset</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr v-for=\"weather in historicalWeather\" :key=\"weather.date\">\r\n            <td class=\"border px-4 py-2\">{{ new Date(weather.date).toLocaleDateString() }}</td>\r\n            <td class=\"border px-4 py-2\">{{ weather.temperature }}°C</td>\r\n            <td class=\"border px-4 py-2\">{{ weather.description }}</td>\r\n            <td class=\"border px-4 py-2\">{{ weather.feels_like }}°C</td>\r\n            <td class=\"border px-4 py-2\">{{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import gql from 'graphql-tag';\r\n  import { useQuery } from '@vue/apollo-composable';\r\n  \r\n  export default {\r\n    name: 'HistoricalWeatherTable',\r\n    data() {\r\n      return {\r\n        location: 'Delhi',\r\n        fromDate: '',\r\n        toDate: '',\r\n        historicalWeather: [],\r\n      };\r\n    },\r\n    methods: {\r\n      async getHistoricalWeather() {\r\n        if (!this.fromDate || !this.toDate || new Date(this.toDate) - new Date(this.fromDate) > 30 * 24 * 60 * 60 * 1000) {\r\n          alert('Please select a valid date range within 30 days.');\r\n          return;\r\n        }\r\n  \r\n        const response = await this.$apollo.query({\r\n          query: gql`\r\n            query($city: String!, $from: String!, $to: String!) {\r\n              getHistoricalWeather(city: $city, from: $from, to: $to) {\r\n                date\r\n                temperature\r\n                description\r\n                feels_like\r\n                sunset\r\n              }\r\n            }\r\n          `,\r\n          variables: { city: this.location, from: this.fromDate, to: this.toDate },\r\n        });\r\n  \r\n        this.historicalWeather = response.data.getHistoricalWeather;\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  /* Add any scoped styles here */\r\n  </style>\r\n  "],"mappings":"AA8CE,OAAOA,GAAE,MAAO,aAAa;AAC7B,SAASC,QAAO,QAAS,wBAAwB;AAEjD,eAAe;EACbC,IAAI,EAAE,wBAAwB;EAC9BC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,OAAO;MACjBC,QAAQ,EAAE,EAAE;MACZC,MAAM,EAAE,EAAE;MACVC,iBAAiB,EAAE;IACrB,CAAC;EACH,CAAC;EACDC,OAAO,EAAE;IACP,MAAMC,oBAAoBA,CAAA,EAAG;MAC3B,IAAI,CAAC,IAAI,CAACJ,QAAO,IAAK,CAAC,IAAI,CAACC,MAAK,IAAK,IAAII,IAAI,CAAC,IAAI,CAACJ,MAAM,IAAI,IAAII,IAAI,CAAC,IAAI,CAACL,QAAQ,IAAI,EAAC,GAAI,EAAC,GAAI,EAAC,GAAI,EAAC,GAAI,IAAI,EAAE;QAChHM,KAAK,CAAC,kDAAkD,CAAC;QACzD;MACF;MAEA,MAAMC,QAAO,GAAI,MAAM,IAAI,CAACC,OAAO,CAACC,KAAK,CAAC;QACxCA,KAAK,EAAEd,GAAG;;;;;;;;;;WAUT;QACDe,SAAS,EAAE;UAAEC,IAAI,EAAE,IAAI,CAACZ,QAAQ;UAAEa,IAAI,EAAE,IAAI,CAACZ,QAAQ;UAAEa,EAAE,EAAE,IAAI,CAACZ;QAAO;MACzE,CAAC,CAAC;MAEF,IAAI,CAACC,iBAAgB,GAAIK,QAAQ,CAACT,IAAI,CAACM,oBAAoB;IAC7D;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}