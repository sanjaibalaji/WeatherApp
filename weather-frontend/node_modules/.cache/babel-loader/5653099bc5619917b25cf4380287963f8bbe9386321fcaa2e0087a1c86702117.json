{"ast":null,"code":"import { ref, watchEffect } from 'vue';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@vue/apollo-composable';\nimport HourlyForecast from '../components/HourlyForecast.vue';\nexport default {\n  props: ['city'],\n  components: {\n    HourlyForecast\n  },\n  setup(props) {\n    const weather = ref(null);\n    const hourlyForecast = ref([]);\n    const {\n      result,\n      loading,\n      error\n    } = useQuery(gql`\n        query($city: String!) {\n          getWeather(city: $city) {\n            description\n            temperature\n            feels_like\n            sunset\n            icon\n            hourly {\n              dt\n              temp\n              icon\n            }\n          }\n        }\n      `, {\n      city: props.city\n    });\n    watchEffect(() => {\n      if (!loading.value && result.value) {\n        weather.value = result.value.getWeather;\n        hourlyForecast.value = result.value.getWeather.hourly;\n      }\n    });\n    return {\n      weather,\n      hourlyForecast,\n      // city: props.city,\n      loading,\n      error\n    };\n  }\n};","map":{"version":3,"names":["ref","watchEffect","gql","useQuery","HourlyForecast","props","components","setup","weather","hourlyForecast","result","loading","error","city","value","getWeather","hourly"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\views\\WeatherResults.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n -->\r\n\r\n <!-- <template>\r\n    <div class=\"min-h-screen w-full flex flex-col items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col items-center justify-center\">\r\n      <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4 rounded-lg bg-white bg-opacity-25 backdrop-blur-sm\">\r\n      <div class=\" p-4  rounded-lg text-black\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n      </div>\r\n    <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- above code final code -->\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl\">\r\n      <div class=\"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\" style=\"background-image: url('/background-image.png'); background-size: cover;\">\r\n        <div class=\"flex flex-col items-center md:items-start text-center md:text-left w-full md:w-2/3 p-4 h-full\">\r\n          <h1 class=\"text-2xl mb-4 text-white\">Weather Results for {{ city }}</h1>\r\n          <div v-if=\"weather\" class=\"text-center md:text-left p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full\">\r\n            <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n            <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto md:mx-0\" />\r\n            <div class=\"text-sm text-black\">{{ city }}</div>\r\n            <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n            <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n            <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"w-full md:w-1/3 flex flex-col justify-center h-full\">\r\n          <div class=\"bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-1/2 p-4\">\r\n            <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"random-text text-white mt-4 text-center\">\r\n         Your random text lines here \r\n        Improve him believe opinion offered met and end cheered forbade. Friendly as stranger speedy by recurred. Son interest wandered sir addition end say. Manners beloved affixed picture men ask.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n -->\r\n\r\n <!-- <template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\">\r\n        <div class=\"flex flex-col items-center md:items-start text-center md:text-left w-full md:w-1/2 h-full p-4\">\r\n           <h1 class=\"text-2xl mb-4 text-white\">Weather Results for {{ city }}</h1> \r\n          <div v-if=\"weather\" class=\"text-center md:text-center p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full flex flex-col justify-between\">\r\n            <div class=\"flex flex-col justify-between space-y-4\">\r\n              <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n              <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n              <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto md:mx-auto my-4\" />\r\n              <div class=\"text-sm text-black\">{{ city }}</div>\r\n              <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n              <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n              <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"w-full md:w-1/2 h-1/2\">\r\n          <HourlyForecast :hourlyForecast=\"hourlyForecast\" class=\"bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg h-full\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n<!-- 2nd final code  -->\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\">\r\n        <div class=\"flex flex-col items-center md:items-start text-center md:text-left w-full md:w-1/2 h-full p-4\">\r\n          <div v-if=\"weather\" class=\"text-center md:text-center p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full flex flex-col justify-between space-y-4\">\r\n            <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n            <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto my-4\" />\r\n            <div class=\"text-sm text-black\">{{ city }}</div>\r\n            <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n            <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n            <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"w-full md:w-1/2 h-1/2 md:h-auto\">\r\n          <HourlyForecast :hourlyForecast=\"hourlyForecast\" class=\"bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg h-full\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"text-center p-4 text-black mt-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg\">\r\n        Improve him believe opinion offered met and end cheered forbade. Friendly as stranger speedy by recurred. Son interest wandered sir addition end say. Manners beloved affixed picture men ask.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col md:flex-row items-stretch justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg h-full\">\r\n      \r\n        <div class=\"flex flex-col items-center md:items-start text-center md:text-left w-full md:w-1/2 p-4\">\r\n          <div v-if=\"weather\" class=\"text-center md:text-center p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full flex flex-col justify-between\">\r\n            <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n            <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto my-4\" />\r\n            <div class=\"text-sm text-black\">{{ city }}</div>\r\n            <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n            <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n            <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n          </div>\r\n        </div>\r\n       \r\n        <div class=\"flex flex-col justify-between w-full md:w-1/2 h-full\">\r\n        \r\n          <div class=\"bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg mb-4 h-1/2\">\r\n            <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n          </div>\r\n        \r\n          <div class=\"text-center p-4 text-black bg-white bg-opacity-30 backdrop-blur-sm rounded-lg h-1/2\">\r\n            Improve him believe opinion offered met and end cheered forbade. Friendly as stranger speedy by recurred. Son interest wandered sir addition end say. Manners beloved affixed picture men ask.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script> -->\r\n<!-- exact code  -->\r\n\r\n<template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col md:flex-row items-stretch justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg h-full\">\r\n        <!-- Left Column: Weather Card -->\r\n        <div class=\"flex flex-col items-center md:items-start text-center md:text-left w-full md:w-1/2 p-4\">\r\n          <div v-if=\"weather\" class=\"text-center md:text-center p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full flex flex-col justify-between\">\r\n            <div class=\"flex justify-between items-center w-full\">\r\n              <h2 class=\"text-2xl text-black\">Today</h2>\r\n              <span class=\"text-black\">▼</span>\r\n            </div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto my-4\" />\r\n            <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n            <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n            <div class=\"text-lg text-black\">{{ city }}</div>\r\n            <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n            <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n            <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) }}</div>\r\n          </div>\r\n        </div>\r\n        <!-- Right Column: Split into two rows -->\r\n        <div class=\"flex flex-col justify-between w-full md:w-1/2 h-full\">\r\n          <!-- Top Row: Hourly Forecast -->\r\n          <div class=\"bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg mb-4 h-1/2\">\r\n            <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n          </div>\r\n          <!-- Bottom Row: Random Text -->\r\n          <div class=\"text-center p-4 text-black bg-white bg-opacity-30 backdrop-blur-sm rounded-lg h-1/2\">\r\n            Improve him believe opinion offered met and end cheered forbade. Friendly as stranger speedy by recurred. Son interest wandered sir addition end say. Manners beloved affixed picture men ask.\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n\r\n"],"mappings":"AAwgBA,SAASA,GAAG,EAAEC,WAAU,QAAS,KAAK;AACtC,OAAOC,GAAE,MAAO,aAAa;AAC7B,SAASC,QAAO,QAAS,wBAAwB;AACjD,OAAOC,cAAa,MAAO,kCAAkC;AAE7D,eAAe;EACbC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,UAAU,EAAE;IACVF;EACF,CAAC;EACDG,KAAKA,CAACF,KAAK,EAAE;IACX,MAAMG,OAAM,GAAIR,GAAG,CAAC,IAAI,CAAC;IACzB,MAAMS,cAAa,GAAIT,GAAG,CAAC,EAAE,CAAC;IAE9B,MAAM;MAAEU,MAAM;MAAEC,OAAO;MAAEC;IAAM,IAAIT,QAAQ,CACzCD,GAAG;;;;;;;;;;;;;;;OAeF,EACD;MAAEW,IAAI,EAAER,KAAK,CAACQ;IAAK,CACrB,CAAC;IAEDZ,WAAW,CAAC,MAAM;MAChB,IAAI,CAACU,OAAO,CAACG,KAAI,IAAKJ,MAAM,CAACI,KAAK,EAAE;QAClCN,OAAO,CAACM,KAAI,GAAIJ,MAAM,CAACI,KAAK,CAACC,UAAU;QACvCN,cAAc,CAACK,KAAI,GAAIJ,MAAM,CAACI,KAAK,CAACC,UAAU,CAACC,MAAM;MACvD;IACF,CAAC,CAAC;IAEF,OAAO;MACLR,OAAO;MACPC,cAAc;MACd;MACAE,OAAO;MACPC;IACF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}