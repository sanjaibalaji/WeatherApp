{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\"\n};\nconst _hoisted_2 = {\n  class: \"p-8 rounded-lg shadow-lg w-full max-w-4xl bg-cover bg-center bg-fixed\"\n};\nconst _hoisted_3 = {\n  class: \"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\"\n};\nconst _hoisted_4 = {\n  class: \"flex flex-col items-center md:items-start text-center w-full md:w-1/2 h-full p-4\"\n};\nconst _hoisted_5 = {\n  class: \"text-2xl mb-4 text-white\"\n};\nconst _hoisted_6 = {\n  key: 0,\n  class: \"text-center md:text-left p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full flex flex-col justify-between\"\n};\nconst _hoisted_7 = {\n  class: \"flex flex-col justify-between\"\n};\nconst _hoisted_8 = {\n  class: \"text-6xl font-bold text-black\"\n};\nconst _hoisted_9 = {\n  class: \"text-xl text-black\"\n};\nconst _hoisted_10 = [\"src\"];\nconst _hoisted_11 = {\n  class: \"mt-4\"\n};\nconst _hoisted_12 = {\n  class: \"text-sm text-black\"\n};\nconst _hoisted_13 = {\n  class: \"text-sm text-black\"\n};\nconst _hoisted_14 = {\n  class: \"text-sm text-black\"\n};\nconst _hoisted_15 = {\n  class: \"text-sm text-black\"\n};\nconst _hoisted_16 = {\n  class: \"w-full md:w-1/2 h-1/2\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_HourlyForecast = _resolveComponent(\"HourlyForecast\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_createElementVNode(\"div\", _hoisted_4, [_createElementVNode(\"h1\", _hoisted_5, \"Weather Results for \" + _toDisplayString($props.city), 1 /* TEXT */), $setup.weather ? (_openBlock(), _createElementBlock(\"div\", _hoisted_6, [_createElementVNode(\"div\", _hoisted_7, [_createElementVNode(\"div\", _hoisted_8, _toDisplayString($setup.weather.temperature.toFixed(1)) + \"°C\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_9, _toDisplayString($setup.weather.description), 1 /* TEXT */)]), _createElementVNode(\"img\", {\n    src: `http://openweathermap.org/img/wn/${$setup.weather.icon}@2x.png`,\n    alt: \"Weather Icon\",\n    class: \"w-12 h-12 mx-auto md:mx-0 my-4\"\n  }, null, 8 /* PROPS */, _hoisted_10), _createElementVNode(\"div\", _hoisted_11, [_createElementVNode(\"div\", _hoisted_12, _toDisplayString($props.city), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_13, _toDisplayString(new Date().toLocaleDateString()), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_14, \"Feels like \" + _toDisplayString($setup.weather.feels_like.toFixed(1)) + \"°C\", 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_15, \"Sunset \" + _toDisplayString(new Date($setup.weather.sunset * 1000).toLocaleTimeString()), 1 /* TEXT */)])])) : _createCommentVNode(\"v-if\", true)]), _createElementVNode(\"div\", _hoisted_16, [_createVNode(_component_HourlyForecast, {\n    hourlyForecast: $setup.hourlyForecast,\n    class: \"bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg h-full\"\n  }, null, 8 /* PROPS */, [\"hourlyForecast\"])])])])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_hoisted_3","_hoisted_4","_hoisted_5","_toDisplayString","$props","city","$setup","weather","_hoisted_6","_hoisted_7","_hoisted_8","temperature","toFixed","_hoisted_9","description","src","icon","alt","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","Date","toLocaleDateString","_hoisted_14","feels_like","_hoisted_15","sunset","toLocaleTimeString","_createCommentVNode","_hoisted_16","_createVNode","_component_HourlyForecast","hourlyForecast"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\views\\WeatherResults.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n -->\r\n\r\n <!-- <template>\r\n    <div class=\"min-h-screen w-full flex flex-col items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col items-center justify-center\">\r\n      <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4 rounded-lg bg-white bg-opacity-25 backdrop-blur-sm\">\r\n      <div class=\" p-4  rounded-lg text-black\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n      </div>\r\n    <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n  </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n<!-- above code final code -->\r\n\r\n<!-- <template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl\">\r\n      <div class=\"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\" style=\"background-image: url('/background-image.png'); background-size: cover;\">\r\n        <div class=\"flex flex-col items-center md:items-start text-center md:text-left w-full md:w-2/3 p-4 h-full\">\r\n          <h1 class=\"text-2xl mb-4 text-white\">Weather Results for {{ city }}</h1>\r\n          <div v-if=\"weather\" class=\"text-center md:text-left p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full\">\r\n            <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n            <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto md:mx-0\" />\r\n            <div class=\"text-sm text-black\">{{ city }}</div>\r\n            <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n            <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n            <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n          </div>\r\n        </div>\r\n        <div class=\"w-full md:w-1/3 flex flex-col justify-center h-full\">\r\n          <div class=\"bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-1/2 p-4\">\r\n            <HourlyForecast :hourlyForecast=\"hourlyForecast\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"random-text text-white mt-4 text-center\">\r\n         Your random text lines here \r\n        Improve him believe opinion offered met and end cheered forbade. Friendly as stranger speedy by recurred. Son interest wandered sir addition end say. Manners beloved affixed picture men ask.\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n -->\r\n\r\n <template>\r\n  <div class=\"min-h-screen w-full flex items-center justify-center bg-weather bg-cover bg-center bg-fixed\">\r\n    <div class=\"p-8 rounded-lg shadow-lg w-full max-w-4xl bg-cover bg-center bg-fixed\">\r\n      <div class=\"flex flex-col md:flex-row items-center justify-between p-6 bg-opacity-70 backdrop-blur-sm rounded-lg\">\r\n        <div class=\"flex flex-col items-center md:items-start text-center w-full md:w-1/2 h-full p-4\">\r\n          <h1 class=\"text-2xl mb-4 text-white\">Weather Results for {{ city }}</h1>\r\n          <div v-if=\"weather\" class=\"text-center md:text-left p-4 bg-white bg-opacity-30 backdrop-blur-sm rounded-lg w-full h-full flex flex-col justify-between\">\r\n            <div class=\"flex flex-col justify-between\">\r\n              <div class=\"text-6xl font-bold text-black\">{{ weather.temperature.toFixed(1) }}°C</div>\r\n              <div class=\"text-xl text-black\">{{ weather.description }}</div>\r\n            </div>\r\n            <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"w-12 h-12 mx-auto md:mx-0 my-4\" />\r\n            <div class=\"mt-4\">\r\n              <div class=\"text-sm text-black\">{{ city }}</div>\r\n              <div class=\"text-sm text-black\">{{ new Date().toLocaleDateString() }}</div>\r\n              <div class=\"text-sm text-black\">Feels like {{ weather.feels_like.toFixed(1) }}°C</div>\r\n              <div class=\"text-sm text-black\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div class=\"w-full md:w-1/2 h-1/2\">\r\n          <HourlyForecast :hourlyForecast=\"hourlyForecast\" class=\"bg-white bg-opacity-70 backdrop-blur-sm p-4 rounded-lg h-full\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, watchEffect } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\nimport HourlyForecast from '../components/HourlyForecast.vue';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  components: {\r\n    HourlyForecast,\r\n  },\r\n  setup(props) {\r\n    const weather = ref(null);\r\n    const hourlyForecast = ref([]);\r\n\r\n    const { result, loading, error } = useQuery(\r\n      gql`\r\n        query($city: String!) {\r\n          getWeather(city: $city) {\r\n            description\r\n            temperature\r\n            feels_like\r\n            sunset\r\n            icon\r\n            hourly {\r\n              dt\r\n              temp\r\n              icon\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      { city: props.city }\r\n    );\r\n\r\n    watchEffect(() => {\r\n      if (!loading.value && result.value) {\r\n        weather.value = result.value.getWeather;\r\n        hourlyForecast.value = result.value.getWeather.hourly;\r\n      }\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      hourlyForecast,\r\n      // city: props.city,\r\n      loading,\r\n      error,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n"],"mappings":";;EAuOOA,KAAK,EAAC;AAA6F;;EACjGA,KAAK,EAAC;AAAuE;;EAC3EA,KAAK,EAAC;AAAsG;;EAC1GA,KAAK,EAAC;AAAkF;;EACvFA,KAAK,EAAC;AAA0B;;EA3O9CC,GAAA;EA4O8BD,KAAK,EAAC;;;EACnBA,KAAK,EAAC;AAA+B;;EACnCA,KAAK,EAAC;AAA+B;;EACrCA,KAAK,EAAC;AAAoB;oBA/O7C;;EAkPiBA,KAAK,EAAC;AAAM;;EACVA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAoB;;EAC1BA,KAAK,EAAC;AAAoB;;EAIhCA,KAAK,EAAC;AAAuB;;;uBAnBxCE,mBAAA,CAwBM,OAxBNC,UAwBM,GAvBJC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBJD,mBAAA,CAoBM,OApBNE,UAoBM,GAnBJF,mBAAA,CAeM,OAfNG,UAeM,GAdJH,mBAAA,CAAwE,MAAxEI,UAAwE,EAAnC,sBAAoB,GAAAC,gBAAA,CAAGC,MAAA,CAAAC,IAAI,kBACrDC,MAAA,CAAAC,OAAO,I,cAAlBX,mBAAA,CAYM,OAZNY,UAYM,GAXJV,mBAAA,CAGM,OAHNW,UAGM,GAFJX,mBAAA,CAAuF,OAAvFY,UAAuF,EAAAP,gBAAA,CAAzCG,MAAA,CAAAC,OAAO,CAACI,WAAW,CAACC,OAAO,OAAM,IAAE,iBACjFd,mBAAA,CAA+D,OAA/De,UAA+D,EAAAV,gBAAA,CAA5BG,MAAA,CAAAC,OAAO,CAACO,WAAW,iB,GAExDhB,mBAAA,CAAkI;IAA5HiB,GAAG,sCAAsCT,MAAA,CAAAC,OAAO,CAACS,IAAI;IAAWC,GAAG,EAAC,cAAc;IAACvB,KAAK,EAAC;0BAjP3GwB,WAAA,GAkPYpB,mBAAA,CAKM,OALNqB,WAKM,GAJJrB,mBAAA,CAAgD,OAAhDsB,WAAgD,EAAAjB,gBAAA,CAAbC,MAAA,CAAAC,IAAI,kBACvCP,mBAAA,CAA2E,OAA3EuB,WAA2E,EAAAlB,gBAAA,KAApCmB,IAAI,GAAGC,kBAAkB,oBAChEzB,mBAAA,CAAsF,OAAtF0B,WAAsF,EAAtD,aAAW,GAAArB,gBAAA,CAAGG,MAAA,CAAAC,OAAO,CAACkB,UAAU,CAACb,OAAO,OAAM,IAAE,iBAChFd,mBAAA,CAAuG,OAAvG4B,WAAuG,EAAvE,SAAO,GAAAvB,gBAAA,KAAOmB,IAAI,CAAChB,MAAA,CAAAC,OAAO,CAACoB,MAAM,SAASC,kBAAkB,mB,OAtP1GC,mBAAA,e,GA0PQ/B,mBAAA,CAEM,OAFNgC,WAEM,GADJC,YAAA,CAAyHC,yBAAA;IAAxGC,cAAc,EAAE3B,MAAA,CAAA2B,cAAc;IAAEvC,KAAK,EAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}