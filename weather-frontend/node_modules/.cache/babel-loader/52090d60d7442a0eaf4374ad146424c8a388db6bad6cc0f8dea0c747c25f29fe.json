{"ast":null,"code":"import { ref, onMounted } from 'vue';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@vue/apollo-composable';\nexport default {\n  props: ['city'],\n  setup(props) {\n    const weather = ref(null);\n    const getWeather = async () => {\n      try {\n        const {\n          result\n        } = await useQuery(gql`\n            query($city: String!) {\n              getWeather(city: $city) {\n                description\n                temperature\n                feels_like\n                sunset\n                icon\n              }\n            }\n          `, {\n          city: props.city\n        });\n        weather.value = result.value.getWeather;\n      } catch (error) {\n        console.error(error);\n      }\n    };\n    onMounted(() => {\n      getWeather();\n    });\n    return {\n      weather\n    };\n  }\n};","map":{"version":3,"names":["ref","onMounted","gql","useQuery","props","setup","weather","getWeather","result","city","value","error","console"],"sources":["C:\\Users\\Admin\\task\\weather-frontend\\src\\views\\WeatherResults.vue"],"sourcesContent":["<!-- <template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}째C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}째C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const getWeather = async () => {\r\n      try {\r\n        const { result } = await useQuery(\r\n          gql`\r\n            query($city: String!) {\r\n              getWeather(city: $city) {\r\n                description\r\n                temperature\r\n                feels_like\r\n                sunset\r\n                icon\r\n              }\r\n            }\r\n          `,\r\n          { city: props.city },\r\n        );\r\n        weather.value = result.value.getWeather;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getWeather();\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      city: props.city,\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style> -->\r\n\r\n\r\n<template>\r\n  <div class=\"min-h-screen flex flex-col items-center justify-center bg-gray-100\">\r\n    <h1 class=\"text-2xl mb-4\">Weather Results for {{ city }}</h1>\r\n    <div v-if=\"weather\" class=\"text-center p-4\">\r\n      <div class=\"bg-blue-500 p-4 rounded-lg text-white\">\r\n        <div class=\"text-6xl font-bold\">{{ weather.temperature.toFixed(1) }}째C</div>\r\n        <div class=\"text-xl\">{{ weather.description }}</div>\r\n        <img :src=\"`http://openweathermap.org/img/wn/${weather.icon}@2x.png`\" alt=\"Weather Icon\" class=\"mx-auto\" />\r\n        <div class=\"text-sm\">{{ city }}</div>\r\n        <div class=\"text-sm\">{{ new Date().toLocaleDateString() }}</div>\r\n        <div class=\"text-sm\">Feels like {{ weather.feels_like.toFixed(1) }}째C</div>\r\n        <div class=\"text-sm\">Sunset {{ new Date(weather.sunset * 1000).toLocaleTimeString() }}</div>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { ref, onMounted } from 'vue';\r\nimport gql from 'graphql-tag';\r\nimport { useQuery } from '@vue/apollo-composable';\r\n\r\nexport default {\r\n  props: ['city'],\r\n  setup(props) {\r\n    const weather = ref(null);\r\n\r\n    const getWeather = async () => {\r\n      try {\r\n        const { result } = await useQuery(\r\n          gql`\r\n            query($city: String!) {\r\n              getWeather(city: $city) {\r\n                description\r\n                temperature\r\n                feels_like\r\n                sunset\r\n                icon\r\n              }\r\n            }\r\n          `,\r\n          { city: props.city },\r\n        );\r\n        weather.value = result.value.getWeather;\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    };\r\n\r\n    onMounted(() => {\r\n      getWeather();\r\n    });\r\n\r\n    return {\r\n      weather,\r\n      \r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n/* Add any scoped styles here */\r\n</style>\r\n"],"mappings":"AAoFA,SAASA,GAAG,EAAEC,SAAQ,QAAS,KAAK;AACpC,OAAOC,GAAE,MAAO,aAAa;AAC7B,SAASC,QAAO,QAAS,wBAAwB;AAEjD,eAAe;EACbC,KAAK,EAAE,CAAC,MAAM,CAAC;EACfC,KAAKA,CAACD,KAAK,EAAE;IACX,MAAME,OAAM,GAAIN,GAAG,CAAC,IAAI,CAAC;IAEzB,MAAMO,UAAS,GAAI,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACF,MAAM;UAAEC;QAAO,IAAI,MAAML,QAAQ,CAC/BD,GAAG;;;;;;;;;;WAUF,EACD;UAAEO,IAAI,EAAEL,KAAK,CAACK;QAAK,CACrB,CAAC;QACDH,OAAO,CAACI,KAAI,GAAIF,MAAM,CAACE,KAAK,CAACH,UAAU;MACzC,EAAE,OAAOI,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB;IACF,CAAC;IAEDV,SAAS,CAAC,MAAM;MACdM,UAAU,CAAC,CAAC;IACd,CAAC,CAAC;IAEF,OAAO;MACLD;IAEF,CAAC;EACH;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}